# {{ config.server.name }}

{{ config.server.desc }}

## Installation

### Option 1: Using Virtual Environment (Recommended)

1. **Create a virtual environment**:
```bash
python3 -m venv venv
```

**Note**: On Ubuntu/Debian systems, if you get an "ensurepip is not available" error, install the python3-venv package first:
```bash
sudo apt install python3-venv
```

2. **Activate the virtual environment**:
   - **Linux/macOS**:
   ```bash
   source venv/bin/activate
   ```
   - **Windows**:
   ```cmd
   venv\Scripts\activate
   ```

3. **Install dependencies**:
```bash
pip install -r requirements.txt
```

4. **Run the server**:
```bash
python {{ config.server.name.replace('-', '_') }}_server.py
```

5. **Deactivate when done** (optional):
```bash
deactivate
```

### Option 2: System-wide Installation

1. **Install dependencies**:
```bash
pip install -r requirements.txt
```

2. **Run the server**:
```bash
python {{ config.server.name.replace('-', '_') }}_server.py
```

## MCP Configuration

The generated `mcp.json` file contains the configuration needed to integrate this server with MCP-compatible editors and clients.

### Quick Setup

1. **Copy the MCP configuration** from the generated `mcp.json` file
2. **Add to your editor's MCP configuration** (see platform-specific instructions below)
3. **Restart your editor**

### Platform-Specific Instructions

#### Claude Desktop
- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`
- **Windows**: `%APPDATA%\Claude\claude_desktop_config.json`  
- **Linux**: `~/.config/Claude/claude_desktop_config.json`

#### Cursor Editor
- Add to Cursor settings under MCP configuration
- Restart Cursor after configuration

#### Visual Studio Code
- Install MCP extension
- Add configuration to VS Code settings
- Reload VS Code

#### Neovim
- Use MCP plugin with the provided configuration
- Run `:PackerSync` to install

#### Helix Editor
- Add to `~/.config/helix/config.toml`
- Restart Helix

#### Amazon Q CLI
- Install Amazon Q CLI: `curl -sSL https://amazon-q-cli.s3.amazonaws.com/install.sh | bash`
- Configure AWS credentials: `aws configure` or `aws sso login`
- Add MCP configuration to `~/.config/amazon-q/cli-config.json` (Linux/macOS) or `%APPDATA%\Amazon\Q\cli-config.json` (Windows)
- Start Amazon Q CLI: `amazon-q`
- Use `@tools` command to access your MCP tools

### Configuration Parameters

- **`command`**: Python interpreter command
- **`args`**: Server script path and arguments
- **`cwd`**: Working directory for the server
- **`env`**: Environment variables (PYTHONPATH, etc.)

### Testing Your Configuration

1. **Manual test**: Run the server directly to ensure it starts
2. **Check tools**: Verify tools appear in your editor's MCP interface
3. **Test commands**: Try using the generated tools through the editor

## Tools

{% for tool_name, tool in config.tools.items() %}
{% set func_name = tool_name.lower().replace('-', '_') %}
{% set resolved_args = config.get_resolved_arguments(tool_name) %}

### {{ tool_name }}

{{ tool.desc }}

**Function**: `{{ func_name }}`

**Arguments**:
{% for arg in resolved_args %}
- `{{ arg.name }}` ({{ arg.type }}): {{ arg.help }}{% if arg.default is not none %} [default: {{ arg.default }}]{% endif %}{% if arg.choices %} [choices: {{ arg.choices }}]{% endif %}
{% endfor %}

**Command**: `{{ tool.cmd }}`

{% endfor %}

## Configuration

This server was generated from a YAML configuration file. The server exposes shell commands as MCP tools with the following features:

- Jinja2 template support for dynamic command generation
- Argument validation with patterns and choices
- Environment variable support
- Error handling and timeout protection

## Server Information

- **Name**: {{ config.server.name }}
- **Version**: {{ config.server.version }}
- **Description**: {{ config.server.desc }}
- **Tools**: {{ config.tools|length if config.tools else 0 }}