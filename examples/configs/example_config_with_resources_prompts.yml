# Example YAML configuration for shellmcp with resources and prompts
server:
  name: filesystem-mcp-with-resources
  desc: MCP Server for filesystem operations with resources and prompts
  version: "1.0.0"
  env:
    NODE_ENV: production
    DEBUG: "false"

# Reusable argument definitions
args:
  FilePath:
    help: Path to a file
    type: string
    pattern: "^[^\\0]+$"
  
  DirectoryPath:
    help: Path to a directory
    type: string
    pattern: "^[^\\0]+$"
  
  BooleanFlag:
    help: Boolean flag
    type: boolean
    default: false

# Tool definitions
tools:
  ListFiles:
    cmd: ls -la {{ path }}
    desc: List files in a directory with detailed information
    help-cmd: ls --help
    args:
      - name: path
        help: Directory path to list
        default: "."
        ref: DirectoryPath

  ReadFile:
    cmd: cat {{ file }}
    desc: Read and display the contents of a file
    help-cmd: cat --help
    args:
      - name: file
        help: File to read
        ref: FilePath

# Resource definitions (both command-based and file-based)
resources:
  # Command-based resource
  SystemInfo:
    uri: "system://info"
    name: "System Information"
    description: "Current system information"
    mime_type: "text/plain"
    cmd: "uname -a && df -h"
    
  # File-based resource with template
  ConfigFile:
    uri: "file://config/{{ config_name }}"
    name: "Configuration File"
    description: "Read configuration file from filesystem"
    mime_type: "text/plain"
    file: "{{ config_path }}"
    args:
      - name: config_path
        help: "Path to configuration file"
        ref: FilePath
      - name: config_name
        help: "Configuration name"
        default: "default"
  
  # Static file resource
  StaticDocumentation:
    uri: "docs://{{ doc_type }}"
    name: "Static Documentation"
    description: "Read documentation from file"
    mime_type: "text/markdown"
    file: "docs/{{ doc_type }}.md"
    args:
      - name: doc_type
        help: "Type of documentation"
        choices: ["api", "user-guide", "troubleshooting"]
        default: "api"

# Prompt definitions (both command-based and file-based)
prompts:
  # Command-based prompt
  CodeReview:
    name: "Code Review Prompt"
    description: "Generate a code review prompt"
    cmd: |
      You are a senior software engineer reviewing the following {{ language }} code:
      
      ```{{ language }}
      {{ code }}
      ```
      
      Please provide a thorough code review focusing on:
      - Code quality and best practices
      - Performance implications
      - Security considerations
      - Maintainability
      
      {% if focus_areas %}
      Pay special attention to: {{ focus_areas }}
      {% endif %}
    args:
      - name: language
        help: "Programming language"
        choices: ["python", "javascript", "java", "go"]
        default: "python"
      - name: code
        help: "Code to review"
        type: string
      - name: focus_areas
        help: "Specific areas to focus on"
        type: string
        default: ""
  
  # File-based prompt
  CodeReviewTemplate:
    name: "Code Review Template"
    description: "Load code review prompt from template file"
    file: "prompts/code_review_{{ language }}.txt"
    args:
      - name: language
        help: "Programming language"
        choices: ["python", "javascript", "java", "go"]
        default: "python"
  
  # Custom prompt from file
  CustomPrompt:
    name: "Custom Prompt"
    description: "Load custom prompt from file"
    file: "prompts/{{ prompt_name }}.txt"
    args:
      - name: prompt_name
        help: "Name of the prompt file"
        type: string